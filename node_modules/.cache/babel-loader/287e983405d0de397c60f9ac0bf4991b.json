{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyATdEDiTLiXoQ89qYz3LhneX2Ux4fvbqnM\",\n  authDomain: \"crwn-db-1da8e.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-1da8e.firebaseio.com\",\n  projectId: \"crwn-db-1da8e\",\n  storageBucket: \"crwn-db-1da8e.appspot.com\",\n  messagingSenderId: \"1074764271530\",\n  appId: \"1:1074764271530:web:682bd902e35adb3ea6a5d3\",\n  measurementId: \"G-GCS7T5BHWK\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  const snapShot = await userRef.get();\n  const collectionSnapShot = await collectionRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {});\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/lluis/Documents/VsCodeProjects/react-course/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapShot","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","batch","forEach","obj","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AAEA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AAEXC,EAAAA,MAAM,EAAE,yCAFG;AAGXC,EAAAA,UAAU,EAAE,+BAHD;AAIXC,EAAAA,WAAW,EAAE,sCAJF;AAKXC,EAAAA,SAAS,EAAE,eALA;AAMXC,EAAAA,aAAa,EAAE,2BANJ;AAOXC,EAAAA,iBAAiB,EAAE,eAPR;AAQXC,EAAAA,KAAK,EAAE,4CARI;AASXC,EAAAA,aAAa,EAAE;AATJ,CAAf;AAaA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAqC;AAC1E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AAEA,QAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACO,GAAR,EAAvB;AACA,QAAMC,kBAAkB,GAAG,MAAMJ,aAAa,CAACG,GAAd,EAAjC;;AAEA,MAAI,CAACD,QAAQ,CAACG,MAAd,EAAsB;AAClB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBb,QAA/B;AACA,UAAMc,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMb,OAAO,CAACc,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGb;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOE,OAAOgB,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACH;AAEJ;;AAED,SAAOlB,OAAP;AACH,CA3BM;AA6BP,OAAO,MAAMmB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACtE,QAAMjB,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqBe,aAArB,CAAtB;AAEA,QAAME,KAAK,GAAGrB,SAAS,CAACqB,KAAV,EAAd;AAEAD,EAAAA,YAAY,CAACE,OAAb,CAAqBC,GAAG,IAAI,CAE3B,CAFD;AAGH,CARM;AAUPrC,QAAQ,CAACsC,aAAT,CAAuBrC,MAAvB;AAEA,OAAO,MAAMsC,IAAI,GAAGvC,QAAQ,CAACuC,IAAT,EAAb;AACP,OAAO,MAAMzB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAM0B,QAAQ,GAAG,IAAIxC,QAAQ,CAACuC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAexC,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\n\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n\r\n    apiKey: \"AIzaSyATdEDiTLiXoQ89qYz3LhneX2Ux4fvbqnM\",\r\n    authDomain: \"crwn-db-1da8e.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db-1da8e.firebaseio.com\",\r\n    projectId: \"crwn-db-1da8e\",\r\n    storageBucket: \"crwn-db-1da8e.appspot.com\",\r\n    messagingSenderId: \"1074764271530\",\r\n    appId: \"1:1074764271530:web:682bd902e35adb3ea6a5d3\",\r\n    measurementId: \"G-GCS7T5BHWK\"\r\n\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData ) => {\r\n    if (!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const collectionRef = firestore.collection('users');\r\n\r\n    const snapShot = await userRef.get();\r\n    const collectionSnapShot = await collectionRef.get();\r\n\r\n    if (!snapShot.exists) {\r\n        const { displayName, email } = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try {\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n            })\r\n        } catch (error) {\r\n            console.log('error creating user', error.message);\r\n        }\r\n\r\n    }\r\n\r\n    return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n\r\n    const batch = firestore.batch();\r\n\r\n    objectsToAdd.forEach(obj => {\r\n        \r\n    })\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}